# -*- coding: utf-8 -*-
"""Agedetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13L9yifHtiBkW_KBefLEZYNoAvOD4WXrM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
from PIL import Image
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img
from sklearn.model_selection import train_test_split
from tensorflow.keras.initializers import random_uniform, glorot_uniform, constant, identity
from tensorflow.keras.layers import Dropout, Input, Add, Dense, Activation, BatchNormalization, Flatten, Conv2D, MaxPooling2D, GlobalMaxPooling2D
from tensorflow.keras.models import Model, load_model

path = Path("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/")
filenames = list(map(lambda x: x.name, path.glob('*.jpg')))



print(len(filenames))
print(filenames[:3])

np.random.seed(10)
np.random.shuffle(filenames)

age_labels, image_path = [], []

for filename in filenames:
    image_path.append(filename)
    temp = filename.split('_')
    age_labels.append(temp[0])

print(image_path[:5])

df = pd.DataFrame()
df['image'], df['age'] = image_path, age_labels

df.head()

df = df.astype({'age':'float32'})

#----
img = Image.open("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/"+df.image[6])
plt.imshow(img)

sns.distplot(df.age)

files = df.iloc[0:20]
plt.figure(figsize=(15,15))
for index, file, age in files.itertuples():
    plt.subplot(5,5, index+1)
    img = load_img("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/"+file)
    img = np.array(img)
    plt.imshow(img)
    plt.title(f"Age: {age} ")
    plt.axis('off')

train, test = train_test_split(df, test_size=0.15, random_state=42)

train.head()

test.head()

train.shape

test.shape

x_train = []
for file in train.image:
    img = load_img("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/"+file)
    img = img.resize((128, 128), Image.ANTIALIAS)
    img = np.array(img)
    x_train.append(img)

x_train = np.array(x_train)

x_train = x_train.reshape(len(x_train), 128, 128, 3)  # Assuming RGB images

x_train.shape

x_train = x_train / 255

x_train.shape

y_age = np.array(train.age)

input_size = (128,128,3)

X = Conv2D(64, (3, 3), activation='relu')(inputs)
X = BatchNormalization(axis=3)(X)
X = MaxPooling2D((3, 3))(X)

X = Conv2D(128, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2), strides=(2, 2))(X)

X = Conv2D(256, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2))(X)

# Flatten layer
X = Flatten()(X)

# Dense layers
dense_1 = Dense(256, activation='relu')(X)
dense_2 = Dense(256, activation='relu')(X)
dense_3 = Dense(128, activation='relu')(dense_2)

# Dropout layers
dropout_1 = Dropout(0.4)(dense_1)
dropout_2 = Dropout(0.4)(dense_3)

# Output layer for age prediction
output_2 = Dense(1, name='age_output')(dropout_2)

# Define the model
model = Model(inputs=inputs, outputs=output_2)

model.compile(loss='mae', optimizer='adam', metrics=['mae'])

model_history = model.fit(x=x_train, y=y_age, batch_size=10, epochs=20, validation_split=0.1)

# Plotting the training and validation loss over epochs
plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

index = 40
print("Original Age:", y_age[index])

# Predict age using the model
pred_age = model.predict(x_train[index].reshape(1, 128, 128, 3))[0][0]
print("Predicted Age:", pred_age)

# Display the image
plt.imshow(x_train[index])
plt.title("Original Image")
plt.axis('off')
plt.show()

index = 30
print("Original Age:", y_age[index])

# Predict age using the model
pred_age = model.predict(x_train[index].reshape(1, 128, 128, 3))[0][0]
print("Predicted Age:", pred_age)

# Display the image
plt.imshow(x_train[index])
plt.title("Original Image")
plt.axis('off')
plt.show()

model.save("/content/drive/MyDrive/trained_model.h5")
